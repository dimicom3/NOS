version: '3.4'

services:
  app-demo:
    image: docker.io/library/myapiservice
    depends_on:
      - "appdb"
      - "message-broker"
    container_name: appmyapiservicedemo-service
    ports:
      - "5009:80"
    build:
      context: ./app_demo
      dockerfile: Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=User ID =postgres;Password=postgres;Server=appdb;Port=5432;Database=SampleDriverDb;Pooling=true;
      - ASPNETCORE_URLS=http://+:80
    networks:
      - dev

  app-demo2:
    image: docker.io/library/myapiservice2
    depends_on:
      - "appdb2"
      - "message-broker"
    container_name: appmyapiservicedemo2-service
    ports:
      - "5010:80"
    build:
      context: ./app_demo2
      dockerfile: Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=postgres;Server=appdb2;Port=5432;Database=testDB;Pooling=true;
      - ASPNETCORE_URLS=http://+:80
    networks:
      - dev

  appdb:
    image: postgres:latest
    container_name: appdb
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=SampleDriverDb
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - app_data:/var/lib/postgresql/data
    networks:
      - dev

  appdb2:
    image: postgres:latest
    container_name: appdb2
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=testDB
    ports:
      - "5434:5432"  # Expose a different port for the second database
    restart: always
    volumes:
      - app_data2:/var/lib/postgresql/data
    networks:
      - dev

  message-broker:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # For RabbitMQ management UI
    networks:
      - dev

networks:
  dev:
    driver: bridge

volumes:
  app_data:
  app_data2:
